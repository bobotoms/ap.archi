<?php

namespace Proxies\__CG__\BackOfficeBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Destination extends \BackOfficeBundle\Entity\Destination implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'BackOfficeBundle\\Entity\\Destination' . "\0" . 'id', 'destination', 'subDestinations', 'topCat', 'leftCat', 'subZone', 'linkCat', 'countrys', 'enabled');
        }

        return array('__isInitialized__', '' . "\0" . 'BackOfficeBundle\\Entity\\Destination' . "\0" . 'id', 'destination', 'subDestinations', 'topCat', 'leftCat', 'subZone', 'linkCat', 'countrys', 'enabled');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Destination $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', array($id));

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setDestination($destination)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDestination', array($destination));

        return parent::setDestination($destination);
    }

    /**
     * {@inheritDoc}
     */
    public function getDestination()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDestination', array());

        return parent::getDestination();
    }

    /**
     * {@inheritDoc}
     */
    public function setSubDestinations($subDestinations)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSubDestinations', array($subDestinations));

        return parent::setSubDestinations($subDestinations);
    }

    /**
     * {@inheritDoc}
     */
    public function getSubDestinations()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubDestinations', array());

        return parent::getSubDestinations();
    }

    /**
     * {@inheritDoc}
     */
    public function setTopCat($topCat)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTopCat', array($topCat));

        return parent::setTopCat($topCat);
    }

    /**
     * {@inheritDoc}
     */
    public function getTopCat()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTopCat', array());

        return parent::getTopCat();
    }

    /**
     * {@inheritDoc}
     */
    public function setLeftCat($leftCat)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLeftCat', array($leftCat));

        return parent::setLeftCat($leftCat);
    }

    /**
     * {@inheritDoc}
     */
    public function getLeftCat()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLeftCat', array());

        return parent::getLeftCat();
    }

    /**
     * {@inheritDoc}
     */
    public function setSubZone($subZone)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSubZone', array($subZone));

        return parent::setSubZone($subZone);
    }

    /**
     * {@inheritDoc}
     */
    public function getSubZone()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubZone', array());

        return parent::getSubZone();
    }

    /**
     * {@inheritDoc}
     */
    public function setLinkCat($linkCat)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLinkCat', array($linkCat));

        return parent::setLinkCat($linkCat);
    }

    /**
     * {@inheritDoc}
     */
    public function getLinkCat()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLinkCat', array());

        return parent::getLinkCat();
    }

    /**
     * {@inheritDoc}
     */
    public function setCountrys($countrys)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCountrys', array($countrys));

        return parent::setCountrys($countrys);
    }

    /**
     * {@inheritDoc}
     */
    public function getCountrys()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountrys', array());

        return parent::getCountrys();
    }

    /**
     * {@inheritDoc}
     */
    public function setEnabled($enabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEnabled', array($enabled));

        return parent::setEnabled($enabled);
    }

    /**
     * {@inheritDoc}
     */
    public function getEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEnabled', array());

        return parent::getEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', array());

        return parent::__toString();
    }

}
