<?php

namespace Proxies\__CG__\BackOfficeBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Slide extends \BackOfficeBundle\Entity\Slide implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'BackOfficeBundle\\Entity\\Slide' . "\0" . 'id', 'name', '' . "\0" . 'BackOfficeBundle\\Entity\\Slide' . "\0" . 'picture', '' . "\0" . 'BackOfficeBundle\\Entity\\Slide' . "\0" . 'movieWebm', '' . "\0" . 'BackOfficeBundle\\Entity\\Slide' . "\0" . 'movieMpfour', 'sliders', 'textOne', 'textTwo', 'type', 'caption', 'credit');
        }

        return array('__isInitialized__', '' . "\0" . 'BackOfficeBundle\\Entity\\Slide' . "\0" . 'id', 'name', '' . "\0" . 'BackOfficeBundle\\Entity\\Slide' . "\0" . 'picture', '' . "\0" . 'BackOfficeBundle\\Entity\\Slide' . "\0" . 'movieWebm', '' . "\0" . 'BackOfficeBundle\\Entity\\Slide' . "\0" . 'movieMpfour', 'sliders', 'textOne', 'textTwo', 'type', 'caption', 'credit');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Slide $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', array($id));

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setPicture($picture)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPicture', array($picture));

        return parent::setPicture($picture);
    }

    /**
     * {@inheritDoc}
     */
    public function getPicture()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPicture', array());

        return parent::getPicture();
    }

    /**
     * {@inheritDoc}
     */
    public function setMovieWebm($movieWebm)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMovieWebm', array($movieWebm));

        return parent::setMovieWebm($movieWebm);
    }

    /**
     * {@inheritDoc}
     */
    public function getMovieWebm()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMovieWebm', array());

        return parent::getMovieWebm();
    }

    /**
     * {@inheritDoc}
     */
    public function setMovieMpfour($movieMpfour)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMovieMpfour', array($movieMpfour));

        return parent::setMovieMpfour($movieMpfour);
    }

    /**
     * {@inheritDoc}
     */
    public function getMovieMpfour()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMovieMpfour', array());

        return parent::getMovieMpfour();
    }

    /**
     * {@inheritDoc}
     */
    public function setSliders($sliders)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSliders', array($sliders));

        return parent::setSliders($sliders);
    }

    /**
     * {@inheritDoc}
     */
    public function getSliders()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSliders', array());

        return parent::getSliders();
    }

    /**
     * {@inheritDoc}
     */
    public function setTextOne($textOne)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTextOne', array($textOne));

        return parent::setTextOne($textOne);
    }

    /**
     * {@inheritDoc}
     */
    public function getTextOne()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTextOne', array());

        return parent::getTextOne();
    }

    /**
     * {@inheritDoc}
     */
    public function setTextTwo($textTwo)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTextTwo', array($textTwo));

        return parent::setTextTwo($textTwo);
    }

    /**
     * {@inheritDoc}
     */
    public function getTextTwo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTextTwo', array());

        return parent::getTextTwo();
    }

    /**
     * {@inheritDoc}
     */
    public function setType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', array($type));

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', array());

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setCaption($caption)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCaption', array($caption));

        return parent::setCaption($caption);
    }

    /**
     * {@inheritDoc}
     */
    public function getCaption()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCaption', array());

        return parent::getCaption();
    }

    /**
     * {@inheritDoc}
     */
    public function setCredit($credit)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCredit', array($credit));

        return parent::setCredit($credit);
    }

    /**
     * {@inheritDoc}
     */
    public function getCredit()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCredit', array());

        return parent::getCredit();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', array());

        return parent::__toString();
    }

}
